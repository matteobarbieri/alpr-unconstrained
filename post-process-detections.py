import os

import argparse

import json


def parse_args():

    parser = argparse.ArgumentParser()

    parser.add_argument(
        'input_folder',
        help="The folder containing the original input images.")

    parser.add_argument(
        'aux_folder',
        help="The folder containing auxiliary files generated by the "
        "pipeline.")

    parser.add_argument(
        '--start_frame',
        type=int,
        default=1,
        help="The starting frame.")

    parser.add_argument(
        '--end_frame',
        type=int,
        required=True,
        help="The ending frame.")

    parser.add_argument(
        '--width',
        type=int,
        help="The width of the original image")

    parser.add_argument(
        '--height',
        type=int,
        help="The height of the original image")

    return parser.parse_args()


def process_annotations(annotations):
    pass


def duplicate_license_exists(p, uid, plates):
    """
    Check if there is another license plate from a different vehicle with the
    same extracted text.
    """

    for v_id, op in plates:
        if op['plate_text'] == p['plate_text'] and uid != v_id:
            return True

    return False


def remove_duplicate_license(car, plates):
    new_plates_list = list()

    for p in car['plates']:

        if not duplicate_license_exists(p, car['uid'], plates):
        # if (car['uid'], p['plate_text']) not in [  # noqa
                # (uid, op['plate_text']) for (uid, op) in plates]:

            new_plates_list.append(p)

    car['plates'] = new_plates_list


def remove_duplicates(annotations):

    plates = list()

    uid = 1

    for c in annotations['cars']:
        # num_plates_in_car = len(c['plates'])
        # N += num_plates_in_car
        c['uid'] = uid
        plates.extend([(uid, p) for p in c['plates']])
        uid += 1

    # print(json.dumps(annotations, indent=2))

    # for p in plates:
        # print(p)

    # print(plates)

    # print("Number of cars: {}".format(len(annotations['cars'])))
    # print("Number of plates: {}".format(N))

    # List of cleaned up cars
    cars = list()

    for c in annotations['cars']:

        # Make a copy of the annotation for a single car
        c_copy = dict(c)
        if len(c_copy['plates']) <= 1:
            cars.append(c_copy)
        else:
            remove_duplicate_license(c_copy, plates)
            cars.append(c_copy)

    annotations_unique = dict()
    annotations_unique['cars'] = cars

    return annotations_unique


def main():

    args = parse_args()

    for t in range(args.start_frame, args.end_frame+1):

        annotations_file = os.path.join(
            args.aux_folder,
            "frame{:05d}_annotations.json".format(t))

        # Load annotations from json file
        with open(annotations_file, 'r') as jf:
            annotations = json.load(jf)

        N_before = sum([len(c['plates']) for c in annotations['cars']])

        # Remove duplicate coming from overlapping vehicles/large BB
        annotations_unique = remove_duplicates(annotations)

        N_after = sum([len(c['plates']) for c in annotations_unique['cars']])

        print("License plates BEFORE pruning: {}".format(N_before))
        print("License plates AFTER pruning: {}".format(N_after))

        # Process annotations
        # TODO disable for now
        # process_annotations(annotations_unique)

        annotations_unique_file = os.path.join(
            args.aux_folder,
            "frame{:05d}_annotations_unique.json".format(t))

        # Load annotations from json file
        with open(annotations_unique_file, 'w') as jf:
            annotations = json.dump(annotations_unique, jf, indent=4)


if __name__ == "__main__":
    main()
