import os

import argparse

import json

from utils import guess_last_frame

from post_processing import process_annotations

def parse_args():

    parser = argparse.ArgumentParser()

    parser.add_argument(
        'input_folder',
        help="The folder containing the original input images.")

    parser.add_argument(
        'aux_folder',
        help="The folder containing auxiliary files generated by the "
        "pipeline.")

    parser.add_argument(
        '--start_frame',
        type=int,
        default=1,
        help="The starting frame.")

    parser.add_argument(
        '--end_frame',
        type=int,
        # required=True,
        help="The ending frame.")

    parser.add_argument(
        '--window',
        type=int,
        default=25,
        help="Number of frames before and after to use to correct detections.")

    args = parser.parse_args()
    if args.end_frame is None:
        args.end_frame = guess_last_frame(args.input_folder)

    return args


def main():

    args = parse_args()

    # Keep track of previous frames
    annotations_history = list()

    # First create a list of detections in all frames, in order to be able in a
    # second passage to fill in missing detections/correct them.
    for t in range(args.start_frame, args.end_frame+1):

        annotations_file = os.path.join(
            args.aux_folder,
            "frame{:05d}_annotations.json".format(t))

        # Load annotations from json file
        with open(annotations_file, 'r') as jf:
            annotations = json.load(jf)

        # Save annotations for a given frame
        annotations_history.append(annotations)

    # Then, try to fill in gaps using information from surrounding frames
    i = 0

    # Number of frames before and after to use to correct information
    for t in range(args.start_frame, args.end_frame+1):

        # Skip the first and last N frames (N = args.window)
        # TODO check this, there might be a bug!
        if i >= args.window and i < (args.end_frame - args.window):
            print("Processing frame {}".format(t))

            # Process annotations
            annotations_unique = process_annotations(
                annotations_history, i, args.window)

            annotations_unique_file = os.path.join(
                args.aux_folder,
                "frame{:05d}_annotations_unique.json".format(t))

            # Load annotations from json file
            with open(annotations_unique_file, 'w') as jf:
                annotations = json.dump(annotations_unique, jf, indent=4)
        else:
            print("Skipping frame {} (out of time window)".format(t))

        i += 1


if __name__ == "__main__":
    main()
